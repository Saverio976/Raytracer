<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_a01721" xml:lang="en-US">
<title>RayTracer::PluginsExt::Sphere::SphereEntity Class Reference</title>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary></indexterm>
<para>
<computeroutput>#include &lt;SphereEntity.hpp&gt;</computeroutput>
</para>
Inheritance diagram for RayTracer::PluginsExt::Sphere::SphereEntity:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="a01720.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for RayTracer::PluginsExt::Sphere::SphereEntity:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="a01719.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_a01721_1a4eb023f69a4142ab0a5f6c7cee160c42">SphereEntity</link> (const <link linkend="_a01517">Scenes::ISetting</link> &amp;config, <link linkend="_a01365">ILogger</link> &amp;logger)</para>
</listitem>
            <listitem><para><link linkend="_a01301_1ab003087623e47600c09a76ff8138d37b">Type</link> <link linkend="_a01721_1a44805cfa4eb1d0e282d5b2dbc436886a">getType</link> () const final</para>

<para>Get the type (light, camera, primitive) </para>
</listitem>
            <listitem><para><link linkend="_a01317">Entities::Transform::ITransform</link> &amp; <link linkend="_a01721_1aa9dfdd2a6caf00b259ba12eeee4c42a2">getTransform</link> () final</para>

<para>Get the transform (position, rotation, scale) </para>
</listitem>
            <listitem><para>const <link linkend="_a01317">Entities::Transform::ITransform</link> &amp; <link linkend="_a01721_1a666898ba8544f9352c35d604c68db6a8">getTransform</link> () const final</para>

<para>Get the transform (position, rotation, scale) (const) </para>
</listitem>
            <listitem><para>bool <link linkend="_a01721_1af7a662faf2a05329d53bcf09f24eb7d7">isCollided</link> (const <link linkend="_a01329">Entities::Transform::Vector3f</link> &amp;point) const final</para>

<para>Check if the point is collided with the box. </para>
</listitem>
            <listitem><para>std::optional&lt; <link linkend="_a01329">Entities::Transform::Vector3f</link> &gt; <link linkend="_a01721_1ad9fa68e2ac7014bccf47ae16dd3b4cbf">isCollided</link> (const <link linkend="_a01397">Images::Ray</link> &amp;ray) const final</para>

<para>Check if the ray is collided. </para>
</listitem>
            <listitem><para><link linkend="_a01369">Images::Color</link> <link linkend="_a01721_1a20b848feb094a38fcac57aec91621f09">getColor</link> (const <link linkend="_a01397">Images::Ray</link> &amp;ray, const <link linkend="_a01505">Scenes::IDisplayable</link> &amp;displayable, const <link linkend="_a01329">Entities::Transform::Vector3f</link> &amp;intersect) const final</para>

<para>Get the material. </para>
</listitem>
            <listitem><para><link linkend="_a01369">Images::Color</link> <link linkend="_a01721_1a6527a5980f0edb5ba197969a866e3dde">redirectionLight</link> (const <link linkend="_a01397">Images::Ray</link> &amp;ray, const <link linkend="_a01505">Scenes::IDisplayable</link> &amp;displayable, const <link linkend="_a01329">Entities::Transform::Vector3f</link> &amp;intersect) const final</para>

<para>this function is called when the object intercept the ray light </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_a01321">Entities::Transform::Transform</link> <link linkend="_a01721_1a52d968d429d6d36f850be1d1bfa889e4">_transform</link></para>
</listitem>
            <listitem><para>double <link linkend="_a01721_1a167435871af3eb601b0863802ca6f79e">_radius</link></para>
</listitem>
            <listitem><para>std::optional&lt; std::reference_wrapper&lt; <link linkend="_a01309">RayTracer::Entities::IMaterial</link> &gt; &gt; <link linkend="_a01721_1a9ddd18910dfc68845ed9cbdc284a9a5c">_material</link></para>
</listitem>
            <listitem><para><link linkend="_a01365">ILogger</link> &amp; <link linkend="_a01721_1a6363c7936bdbe54d4b6e3f3ae657d9f8">_logger</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_a01721_1a4eb023f69a4142ab0a5f6c7cee160c42"/>    <section>
    <title>SphereEntity()</title>
<indexterm><primary>SphereEntity</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>SphereEntity</secondary></indexterm>
<para><computeroutput>RayTracer::PluginsExt::Sphere::SphereEntity::SphereEntity (const <link linkend="_a01517">Scenes::ISetting</link> &amp; config, <link linkend="_a01365">ILogger</link> &amp; logger)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_a01721_1a20b848feb094a38fcac57aec91621f09"/>    <section>
    <title>getColor()</title>
<indexterm><primary>getColor</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>getColor</secondary></indexterm>
<para><computeroutput><link linkend="_a01369">Images::Color</link> RayTracer::PluginsExt::Sphere::SphereEntity::getColor (const <link linkend="_a01397">Images::Ray</link> &amp; ray, const <link linkend="_a01505">Scenes::IDisplayable</link> &amp; displayable, const <link linkend="_a01329">Entities::Transform::Vector3f</link> &amp; intersect) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the material. </para>
</para>

<para><formalpara><title>Returns</title>

<para>the material </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01313_1a6c9c38a268043a21e98bd42661125e2e">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01721_1a666898ba8544f9352c35d604c68db6a8"/>    <section>
    <title>getTransform()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>getTransform</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>getTransform</secondary></indexterm>
<para><computeroutput>const <link linkend="_a01317">Entities::Transform::ITransform</link>&amp; RayTracer::PluginsExt::Sphere::SphereEntity::getTransform ( ) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the transform (position, rotation, scale) (const) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the transform </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01301_1a703e6f7e78da30c2c7f4fecbe0bc580e">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01721_1aa9dfdd2a6caf00b259ba12eeee4c42a2"/>    <section>
    <title>getTransform()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>getTransform</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>getTransform</secondary></indexterm>
<para><computeroutput><link linkend="_a01317">Entities::Transform::ITransform</link>&amp; RayTracer::PluginsExt::Sphere::SphereEntity::getTransform ( )<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the transform (position, rotation, scale) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the transform </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01301_1ac97ca7c49d7a87c00bf6a95ca227108a">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01721_1a44805cfa4eb1d0e282d5b2dbc436886a"/>    <section>
    <title>getType()</title>
<indexterm><primary>getType</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>getType</secondary></indexterm>
<para><computeroutput><link linkend="_a01301_1ab003087623e47600c09a76ff8138d37b">Type</link> RayTracer::PluginsExt::Sphere::SphereEntity::getType ( ) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the type (light, camera, primitive) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the type </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01301_1a68374ef5e0932ab3b3dea57a87be156e">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01721_1af7a662faf2a05329d53bcf09f24eb7d7"/>    <section>
    <title>isCollided()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>isCollided</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>isCollided</secondary></indexterm>
<para><computeroutput>bool RayTracer::PluginsExt::Sphere::SphereEntity::isCollided (const <link linkend="_a01329">Entities::Transform::Vector3f</link> &amp; point) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Check if the point is collided with the box. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>point</entry>
                                <entry>
<para>the point</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the point is collided </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01313_1a59076ea4dbff9d3617643678cb6bb266">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01721_1ad9fa68e2ac7014bccf47ae16dd3b4cbf"/>    <section>
    <title>isCollided()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>isCollided</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>isCollided</secondary></indexterm>
<para><computeroutput>std::optional&lt;<link linkend="_a01329">Entities::Transform::Vector3f</link>&gt; RayTracer::PluginsExt::Sphere::SphereEntity::isCollided (const <link linkend="_a01397">Images::Ray</link> &amp; ray) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Check if the ray is collided. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ray</entry>
                                <entry>
<para>the ray</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the ray is collided </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01313_1aff9a474acf22c4d04959f8e8aaa5cac9">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01721_1a6527a5980f0edb5ba197969a866e3dde"/>    <section>
    <title>redirectionLight()</title>
<indexterm><primary>redirectionLight</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>redirectionLight</secondary></indexterm>
<para><computeroutput><link linkend="_a01369">Images::Color</link> RayTracer::PluginsExt::Sphere::SphereEntity::redirectionLight (const <link linkend="_a01397">Images::Ray</link> &amp; ray, const <link linkend="_a01505">Scenes::IDisplayable</link> &amp; displayable, const <link linkend="_a01329">Entities::Transform::Vector3f</link> &amp; intersect) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>this function is called when the object intercept the ray light </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ray</entry>
                                <entry>
<para>the ray between the light and the object </para>
</entry>
                            </row>
                            <row>
                                <entry>displayable</entry>
                                <entry>
<para>the displayable </para>
</entry>
                            </row>
                            <row>
                                <entry>intersect</entry>
                                <entry>
<para>the intersection point between this point and the ray</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the color of the shadow </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01313_1ae6a0b892920f7ea034475d7777ed5cf2">RayTracer::Entities::IPrimitive</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_a01721_1a6363c7936bdbe54d4b6e3f3ae657d9f8"/>    <section>
    <title>_logger</title>
<indexterm><primary>_logger</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>_logger</secondary></indexterm>
<para><computeroutput><link linkend="_a01365">ILogger</link>&amp; RayTracer::PluginsExt::Sphere::SphereEntity::_logger<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01721_1a9ddd18910dfc68845ed9cbdc284a9a5c"/>    <section>
    <title>_material</title>
<indexterm><primary>_material</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>_material</secondary></indexterm>
<para><computeroutput>std::optional&lt;std::reference_wrapper&lt;<link linkend="_a01309">RayTracer::Entities::IMaterial</link>&gt; &gt; RayTracer::PluginsExt::Sphere::SphereEntity::_material<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01721_1a167435871af3eb601b0863802ca6f79e"/>    <section>
    <title>_radius</title>
<indexterm><primary>_radius</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>_radius</secondary></indexterm>
<para><computeroutput>double RayTracer::PluginsExt::Sphere::SphereEntity::_radius<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01721_1a52d968d429d6d36f850be1d1bfa889e4"/>    <section>
    <title>_transform</title>
<indexterm><primary>_transform</primary><secondary>RayTracer::PluginsExt::Sphere::SphereEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Sphere::SphereEntity</primary><secondary>_transform</secondary></indexterm>
<para><computeroutput><link linkend="_a01321">Entities::Transform::Transform</link> RayTracer::PluginsExt::Sphere::SphereEntity::_transform<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
/home/runner/work/Raytracer/Raytracer/PluginsExt/Sphere/<link linkend="_a00371">SphereEntity.hpp</link></section>
</section>
