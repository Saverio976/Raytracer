<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_a01662" xml:lang="en-US">
<title>RayTracer::PluginsExt::Disk::DiskEntity Class Reference</title>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary></indexterm>
<para>
<computeroutput>#include &lt;DiskEntity.hpp&gt;</computeroutput>
</para>
Inheritance diagram for RayTracer::PluginsExt::Disk::DiskEntity:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="a01661.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for RayTracer::PluginsExt::Disk::DiskEntity:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="a01660.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_a01662_1a13bbbfe850b61ab8325ee2069c8612d4">DiskEntity</link> (const <link linkend="_a01530">Scenes::ISetting</link> &amp;config, <link linkend="_a01378">ILogger</link> &amp;logger)</para>
</listitem>
            <listitem><para><link linkend="_a01314_1ab003087623e47600c09a76ff8138d37b">Type</link> <link linkend="_a01662_1a6a15beb816467d6fc09b1914cfd80bb8">getType</link> () const final</para>

<para>Get the type (light, camera, primitive) </para>
</listitem>
            <listitem><para><link linkend="_a01330">Entities::Transform::ITransform</link> &amp; <link linkend="_a01662_1aa7bb7d26ab8c916885136fed23f80446">getTransform</link> () final</para>

<para>Get the transform (position, rotation, scale) </para>
</listitem>
            <listitem><para>const <link linkend="_a01330">Entities::Transform::ITransform</link> &amp; <link linkend="_a01662_1ae1e92c2ffc2e1f532d6294649a2bbf09">getTransform</link> () const final</para>

<para>Get the transform (position, rotation, scale) (const) </para>
</listitem>
            <listitem><para>bool <link linkend="_a01662_1a78c7ecb9c89d5263736e3a7eeae17561">isCollided</link> (const <link linkend="_a01342">Entities::Transform::Vector3f</link> &amp;point) const final</para>

<para>Check if the point is collided with the box. </para>
</listitem>
            <listitem><para>std::optional&lt; <link linkend="_a01342">Entities::Transform::Vector3f</link> &gt; <link linkend="_a01662_1a77e2d9e1a3b868529076a985ae02c06f">isCollided</link> (const <link linkend="_a01410">Images::Ray</link> &amp;ray) const final</para>

<para>Check if the ray is collided. </para>
</listitem>
            <listitem><para><link linkend="_a01382">Images::Color</link> <link linkend="_a01662_1a698890b64e104f0cca8ba376af1e10ae">getColor</link> (const <link linkend="_a01410">Images::Ray</link> &amp;ray, const <link linkend="_a01518">Scenes::IDisplayable</link> &amp;displayable, const <link linkend="_a01342">Entities::Transform::Vector3f</link> &amp;intersect) const final</para>

<para>Get the material. </para>
</listitem>
            <listitem><para><link linkend="_a01382">Images::Color</link> <link linkend="_a01662_1a5a5ecae9fd45f5c3c2e6bce2d970a4f4">redirectionLight</link> (const <link linkend="_a01410">Images::Ray</link> &amp;ray, const <link linkend="_a01518">Scenes::IDisplayable</link> &amp;displayable, const <link linkend="_a01342">Entities::Transform::Vector3f</link> &amp;intersect) const final</para>

<para>this function is called when the object intercept the ray light </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_a01334">Entities::Transform::Transform</link> <link linkend="_a01662_1a7fc46ef2974e08c40827b7a2d332413c">_transform</link></para>
</listitem>
            <listitem><para>double <link linkend="_a01662_1a1f526359332976f83480482290ab3109">_radius</link></para>
</listitem>
            <listitem><para>std::optional&lt; std::reference_wrapper&lt; <link linkend="_a01322">Entities::IMaterial</link> &gt; &gt; <link linkend="_a01662_1a2a586ea2b049b006bbdb5f15f072529c">_material</link></para>
</listitem>
            <listitem><para><link linkend="_a01378">ILogger</link> &amp; <link linkend="_a01662_1aa6cc7b73b854777a821b92e77fbc1ae2">_logger</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_a01662_1a13bbbfe850b61ab8325ee2069c8612d4"/>    <section>
    <title>DiskEntity()</title>
<indexterm><primary>DiskEntity</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>DiskEntity</secondary></indexterm>
<para><computeroutput>RayTracer::PluginsExt::Disk::DiskEntity::DiskEntity (const <link linkend="_a01530">Scenes::ISetting</link> &amp; config, <link linkend="_a01378">ILogger</link> &amp; logger)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_a01662_1a698890b64e104f0cca8ba376af1e10ae"/>    <section>
    <title>getColor()</title>
<indexterm><primary>getColor</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>getColor</secondary></indexterm>
<para><computeroutput><link linkend="_a01382">Images::Color</link> RayTracer::PluginsExt::Disk::DiskEntity::getColor (const <link linkend="_a01410">Images::Ray</link> &amp; ray, const <link linkend="_a01518">Scenes::IDisplayable</link> &amp; displayable, const <link linkend="_a01342">Entities::Transform::Vector3f</link> &amp; intersect) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the material. </para>
</para>

<para><formalpara><title>Returns</title>

<para>the material </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01326_1a6c9c38a268043a21e98bd42661125e2e">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01662_1ae1e92c2ffc2e1f532d6294649a2bbf09"/>    <section>
    <title>getTransform()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>getTransform</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>getTransform</secondary></indexterm>
<para><computeroutput>const <link linkend="_a01330">Entities::Transform::ITransform</link>&amp; RayTracer::PluginsExt::Disk::DiskEntity::getTransform ( ) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the transform (position, rotation, scale) (const) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the transform </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01314_1a703e6f7e78da30c2c7f4fecbe0bc580e">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01662_1aa7bb7d26ab8c916885136fed23f80446"/>    <section>
    <title>getTransform()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>getTransform</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>getTransform</secondary></indexterm>
<para><computeroutput><link linkend="_a01330">Entities::Transform::ITransform</link>&amp; RayTracer::PluginsExt::Disk::DiskEntity::getTransform ( )<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the transform (position, rotation, scale) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the transform </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01314_1ac97ca7c49d7a87c00bf6a95ca227108a">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01662_1a6a15beb816467d6fc09b1914cfd80bb8"/>    <section>
    <title>getType()</title>
<indexterm><primary>getType</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>getType</secondary></indexterm>
<para><computeroutput><link linkend="_a01314_1ab003087623e47600c09a76ff8138d37b">Type</link> RayTracer::PluginsExt::Disk::DiskEntity::getType ( ) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the type (light, camera, primitive) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the type </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01314_1a68374ef5e0932ab3b3dea57a87be156e">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01662_1a78c7ecb9c89d5263736e3a7eeae17561"/>    <section>
    <title>isCollided()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>isCollided</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>isCollided</secondary></indexterm>
<para><computeroutput>bool RayTracer::PluginsExt::Disk::DiskEntity::isCollided (const <link linkend="_a01342">Entities::Transform::Vector3f</link> &amp; point) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Check if the point is collided with the box. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>point</entry>
                                <entry>
<para>the point</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the point is collided </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01326_1a59076ea4dbff9d3617643678cb6bb266">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01662_1a77e2d9e1a3b868529076a985ae02c06f"/>    <section>
    <title>isCollided()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>isCollided</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>isCollided</secondary></indexterm>
<para><computeroutput>std::optional&lt;<link linkend="_a01342">Entities::Transform::Vector3f</link>&gt; RayTracer::PluginsExt::Disk::DiskEntity::isCollided (const <link linkend="_a01410">Images::Ray</link> &amp; ray) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Check if the ray is collided. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ray</entry>
                                <entry>
<para>the ray</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the ray is collided </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01326_1aff9a474acf22c4d04959f8e8aaa5cac9">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01662_1a5a5ecae9fd45f5c3c2e6bce2d970a4f4"/>    <section>
    <title>redirectionLight()</title>
<indexterm><primary>redirectionLight</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>redirectionLight</secondary></indexterm>
<para><computeroutput><link linkend="_a01382">Images::Color</link> RayTracer::PluginsExt::Disk::DiskEntity::redirectionLight (const <link linkend="_a01410">Images::Ray</link> &amp; ray, const <link linkend="_a01518">Scenes::IDisplayable</link> &amp; displayable, const <link linkend="_a01342">Entities::Transform::Vector3f</link> &amp; intersect) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>this function is called when the object intercept the ray light </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ray</entry>
                                <entry>
<para>the ray between the light and the object </para>
</entry>
                            </row>
                            <row>
                                <entry>displayable</entry>
                                <entry>
<para>the displayable </para>
</entry>
                            </row>
                            <row>
                                <entry>intersect</entry>
                                <entry>
<para>the intersection point between this point and the ray</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the color of the shadow </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01326_1ae6a0b892920f7ea034475d7777ed5cf2">RayTracer::Entities::IPrimitive</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_a01662_1aa6cc7b73b854777a821b92e77fbc1ae2"/>    <section>
    <title>_logger</title>
<indexterm><primary>_logger</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>_logger</secondary></indexterm>
<para><computeroutput><link linkend="_a01378">ILogger</link>&amp; RayTracer::PluginsExt::Disk::DiskEntity::_logger<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01662_1a2a586ea2b049b006bbdb5f15f072529c"/>    <section>
    <title>_material</title>
<indexterm><primary>_material</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>_material</secondary></indexterm>
<para><computeroutput>std::optional&lt;std::reference_wrapper&lt;<link linkend="_a01322">Entities::IMaterial</link>&gt; &gt; RayTracer::PluginsExt::Disk::DiskEntity::_material<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01662_1a1f526359332976f83480482290ab3109"/>    <section>
    <title>_radius</title>
<indexterm><primary>_radius</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>_radius</secondary></indexterm>
<para><computeroutput>double RayTracer::PluginsExt::Disk::DiskEntity::_radius<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01662_1a7fc46ef2974e08c40827b7a2d332413c"/>    <section>
    <title>_transform</title>
<indexterm><primary>_transform</primary><secondary>RayTracer::PluginsExt::Disk::DiskEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Disk::DiskEntity</primary><secondary>_transform</secondary></indexterm>
<para><computeroutput><link linkend="_a01334">Entities::Transform::Transform</link> RayTracer::PluginsExt::Disk::DiskEntity::_transform<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
/home/runner/work/Raytracer/Raytracer/PluginsExt/Disk/<link linkend="_a00323">DiskEntity.hpp</link></section>
</section>
