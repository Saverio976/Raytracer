<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_a01717" xml:lang="en-US">
<title>RayTracer::PluginsExt::Triangle::TriangleEntity Class Reference</title>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary></indexterm>
<para>
<computeroutput>#include &lt;TriangleEntity.hpp&gt;</computeroutput>
</para>
Inheritance diagram for RayTracer::PluginsExt::Triangle::TriangleEntity:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="a01716.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
Collaboration diagram for RayTracer::PluginsExt::Triangle::TriangleEntity:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="a01715.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_a01717_1a62ae4644f3741d7aa853dce562b5fb64">TriangleEntity</link> (const <link linkend="_a01489">Scenes::ISetting</link> &amp;config, <link linkend="_a01337">ILogger</link> &amp;logger)</para>
</listitem>
            <listitem><para><link linkend="_a01273_1ab003087623e47600c09a76ff8138d37b">Type</link> <link linkend="_a01717_1aefb63e30deb54b3455205aa9d31ef58b">getType</link> () const final</para>

<para>Get the type (light, camera, primitive) </para>
</listitem>
            <listitem><para><link linkend="_a01289">Entities::Transform::ITransform</link> &amp; <link linkend="_a01717_1af31805afb91921f2de2c51ba915fc7a3">getTransform</link> () final</para>

<para>Get the transform (position, rotation, scale) </para>
</listitem>
            <listitem><para>const <link linkend="_a01289">Entities::Transform::ITransform</link> &amp; <link linkend="_a01717_1a53e716b759b7b519d5bafce4c047ca8b">getTransform</link> () const final</para>

<para>Get the transform (position, rotation, scale) (const) </para>
</listitem>
            <listitem><para>bool <link linkend="_a01717_1ae28cf8d2a9967048feaf391ca5544e7b">isCollided</link> (const <link linkend="_a01301">Entities::Transform::Vector3f</link> &amp;point) const final</para>

<para>Check if the point is collided with the box. </para>
</listitem>
            <listitem><para>std::optional&lt; <link linkend="_a01301">Entities::Transform::Vector3f</link> &gt; <link linkend="_a01717_1a787b08e6a6097411001e7859ab574776">isCollided</link> (const <link linkend="_a01369">Images::Ray</link> &amp;ray) const final</para>

<para>Check if the ray is collided. </para>
</listitem>
            <listitem><para><link linkend="_a01341">Images::Color</link> <link linkend="_a01717_1a354290e7edc235e89e1721369a61f969">getColor</link> (const <link linkend="_a01369">Images::Ray</link> &amp;ray, const <link linkend="_a01477">Scenes::IDisplayable</link> &amp;displayable, const <link linkend="_a01301">Entities::Transform::Vector3f</link> &amp;intersect) const final</para>

<para>Get the material. </para>
</listitem>
            <listitem><para><link linkend="_a01341">Images::Color</link> <link linkend="_a01717_1a31d556941485aa5085311e9d51f98cac">redirectionLight</link> (const <link linkend="_a01369">Images::Ray</link> &amp;ray, const <link linkend="_a01477">Scenes::IDisplayable</link> &amp;displayable, const <link linkend="_a01301">Entities::Transform::Vector3f</link> &amp;intersect) const final</para>

<para>this function is called when the object intercept the ray light </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_a01293">Entities::Transform::Transform</link> <link linkend="_a01717_1aa738e1cd2133a0dcd00584f1b8d722a1">_transform</link></para>
</listitem>
            <listitem><para>std::optional&lt; std::reference_wrapper&lt; <link linkend="_a01281">Entities::IMaterial</link> &gt; &gt; <link linkend="_a01717_1a6bbcd8a3a4e58f0c01b57f77d7410d26">_material</link></para>
</listitem>
            <listitem><para><link linkend="_a01301">Entities::Transform::Vector3f</link> <link linkend="_a01717_1a39ebe1dbea8beda2c3c53ff3a94d2414">_pointOne</link></para>
</listitem>
            <listitem><para><link linkend="_a01301">Entities::Transform::Vector3f</link> <link linkend="_a01717_1ab9e2f3fc826185b88e805812bb15e452">_pointTwo</link></para>
</listitem>
            <listitem><para><link linkend="_a01301">Entities::Transform::Vector3f</link> <link linkend="_a01717_1aeb560280f8b58d61a9fc2ae847f1b573">_pointThree</link></para>
</listitem>
            <listitem><para><link linkend="_a01337">ILogger</link> &amp; <link linkend="_a01717_1a5665591b836d166cbc8defea82d05239">_logger</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_a01717_1a62ae4644f3741d7aa853dce562b5fb64"/>    <section>
    <title>TriangleEntity()</title>
<indexterm><primary>TriangleEntity</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>TriangleEntity</secondary></indexterm>
<para><computeroutput>RayTracer::PluginsExt::Triangle::TriangleEntity::TriangleEntity (const <link linkend="_a01489">Scenes::ISetting</link> &amp; config, <link linkend="_a01337">ILogger</link> &amp; logger)</computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_a01717_1a354290e7edc235e89e1721369a61f969"/>    <section>
    <title>getColor()</title>
<indexterm><primary>getColor</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>getColor</secondary></indexterm>
<para><computeroutput><link linkend="_a01341">Images::Color</link> RayTracer::PluginsExt::Triangle::TriangleEntity::getColor (const <link linkend="_a01369">Images::Ray</link> &amp; ray, const <link linkend="_a01477">Scenes::IDisplayable</link> &amp; displayable, const <link linkend="_a01301">Entities::Transform::Vector3f</link> &amp; intersect) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the material. </para>
</para>

<para><formalpara><title>Returns</title>

<para>the material </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01285_1a6c9c38a268043a21e98bd42661125e2e">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01717_1a53e716b759b7b519d5bafce4c047ca8b"/>    <section>
    <title>getTransform()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>getTransform</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>getTransform</secondary></indexterm>
<para><computeroutput>const <link linkend="_a01289">Entities::Transform::ITransform</link>&amp; RayTracer::PluginsExt::Triangle::TriangleEntity::getTransform ( ) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the transform (position, rotation, scale) (const) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the transform </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01273_1a703e6f7e78da30c2c7f4fecbe0bc580e">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01717_1af31805afb91921f2de2c51ba915fc7a3"/>    <section>
    <title>getTransform()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>getTransform</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>getTransform</secondary></indexterm>
<para><computeroutput><link linkend="_a01289">Entities::Transform::ITransform</link>&amp; RayTracer::PluginsExt::Triangle::TriangleEntity::getTransform ( )<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the transform (position, rotation, scale) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the transform </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01273_1ac97ca7c49d7a87c00bf6a95ca227108a">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01717_1aefb63e30deb54b3455205aa9d31ef58b"/>    <section>
    <title>getType()</title>
<indexterm><primary>getType</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>getType</secondary></indexterm>
<para><computeroutput><link linkend="_a01273_1ab003087623e47600c09a76ff8138d37b">Type</link> RayTracer::PluginsExt::Triangle::TriangleEntity::getType ( ) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Get the type (light, camera, primitive) </para>
</para>

<para><formalpara><title>Returns</title>

<para>the type </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01273_1a68374ef5e0932ab3b3dea57a87be156e">RayTracer::Entities::IEntity</link>.</para>
    </section><anchor xml:id="_a01717_1ae28cf8d2a9967048feaf391ca5544e7b"/>    <section>
    <title>isCollided()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>isCollided</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>isCollided</secondary></indexterm>
<para><computeroutput>bool RayTracer::PluginsExt::Triangle::TriangleEntity::isCollided (const <link linkend="_a01301">Entities::Transform::Vector3f</link> &amp; point) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Check if the point is collided with the box. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>point</entry>
                                <entry>
<para>the point</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the point is collided </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01285_1a59076ea4dbff9d3617643678cb6bb266">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01717_1a787b08e6a6097411001e7859ab574776"/>    <section>
    <title>isCollided()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>isCollided</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>isCollided</secondary></indexterm>
<para><computeroutput>std::optional&lt;<link linkend="_a01301">Entities::Transform::Vector3f</link>&gt; RayTracer::PluginsExt::Triangle::TriangleEntity::isCollided (const <link linkend="_a01369">Images::Ray</link> &amp; ray) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Check if the ray is collided. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ray</entry>
                                <entry>
<para>the ray</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if the ray is collided </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01285_1aff9a474acf22c4d04959f8e8aaa5cac9">RayTracer::Entities::IPrimitive</link>.</para>
    </section><anchor xml:id="_a01717_1a31d556941485aa5085311e9d51f98cac"/>    <section>
    <title>redirectionLight()</title>
<indexterm><primary>redirectionLight</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>redirectionLight</secondary></indexterm>
<para><computeroutput><link linkend="_a01341">Images::Color</link> RayTracer::PluginsExt::Triangle::TriangleEntity::redirectionLight (const <link linkend="_a01369">Images::Ray</link> &amp; ray, const <link linkend="_a01477">Scenes::IDisplayable</link> &amp; displayable, const <link linkend="_a01301">Entities::Transform::Vector3f</link> &amp; intersect) const<computeroutput>[final]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>this function is called when the object intercept the ray light </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ray</entry>
                                <entry>
<para>the ray between the light and the object </para>
</entry>
                            </row>
                            <row>
                                <entry>displayable</entry>
                                <entry>
<para>the displayable </para>
</entry>
                            </row>
                            <row>
                                <entry>intersect</entry>
                                <entry>
<para>the intersection point between this point and the ray</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>the color of the shadow </para>
</formalpara>
</para>
<para>
Implements <link linkend="_a01285_1ae6a0b892920f7ea034475d7777ed5cf2">RayTracer::Entities::IPrimitive</link>.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_a01717_1a5665591b836d166cbc8defea82d05239"/>    <section>
    <title>_logger</title>
<indexterm><primary>_logger</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>_logger</secondary></indexterm>
<para><computeroutput><link linkend="_a01337">ILogger</link>&amp; RayTracer::PluginsExt::Triangle::TriangleEntity::_logger<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01717_1a6bbcd8a3a4e58f0c01b57f77d7410d26"/>    <section>
    <title>_material</title>
<indexterm><primary>_material</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>_material</secondary></indexterm>
<para><computeroutput>std::optional&lt;std::reference_wrapper&lt;<link linkend="_a01281">Entities::IMaterial</link>&gt; &gt; RayTracer::PluginsExt::Triangle::TriangleEntity::_material<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01717_1a39ebe1dbea8beda2c3c53ff3a94d2414"/>    <section>
    <title>_pointOne</title>
<indexterm><primary>_pointOne</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>_pointOne</secondary></indexterm>
<para><computeroutput><link linkend="_a01301">Entities::Transform::Vector3f</link> RayTracer::PluginsExt::Triangle::TriangleEntity::_pointOne<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01717_1aeb560280f8b58d61a9fc2ae847f1b573"/>    <section>
    <title>_pointThree</title>
<indexterm><primary>_pointThree</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>_pointThree</secondary></indexterm>
<para><computeroutput><link linkend="_a01301">Entities::Transform::Vector3f</link> RayTracer::PluginsExt::Triangle::TriangleEntity::_pointThree<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01717_1ab9e2f3fc826185b88e805812bb15e452"/>    <section>
    <title>_pointTwo</title>
<indexterm><primary>_pointTwo</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>_pointTwo</secondary></indexterm>
<para><computeroutput><link linkend="_a01301">Entities::Transform::Vector3f</link> RayTracer::PluginsExt::Triangle::TriangleEntity::_pointTwo<computeroutput>[private]</computeroutput></computeroutput></para>    </section><anchor xml:id="_a01717_1aa738e1cd2133a0dcd00584f1b8d722a1"/>    <section>
    <title>_transform</title>
<indexterm><primary>_transform</primary><secondary>RayTracer::PluginsExt::Triangle::TriangleEntity</secondary></indexterm>
<indexterm><primary>RayTracer::PluginsExt::Triangle::TriangleEntity</primary><secondary>_transform</secondary></indexterm>
<para><computeroutput><link linkend="_a01293">Entities::Transform::Transform</link> RayTracer::PluginsExt::Triangle::TriangleEntity::_transform<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
/home/runner/work/Raytracer/Raytracer/PluginsExt/Triangle/<link linkend="_a00368">TriangleEntity.hpp</link></section>
</section>
